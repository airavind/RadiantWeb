package edu.uga.radiant.util;

import java.io.File;
import java.io.FilenameFilter;
import java.net.URI;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import edu.uga.cs.lumina.discovery.util.WSDLSystem;

/**
 * This is used to initialize HSQL database, it is convenient for developer to test
 * @author ucam10a
 *
 */
public class DatabaseManager {

    protected Connection conn = null;
    
    /**
     * get database connection
     * @param driver db driver
     * @param url db url
     * @param DB dn name
     * @param user db user
     * @param password db password
     */
    public DatabaseManager(String driver, String url, String DB, String user, String password) {
        
        try {

            try {
                Class.forName(driver);
            } catch (Exception e) {
                System.out.println("ERROR: failed to load JDBC driver.");
                e.printStackTrace();
                return;
            }
            conn = DriverManager.getConnection(url + DB, user, password);

        } catch (SQLException e) {
            e.printStackTrace();
        }

    } // constructor
    
    /**
     * get database connection from properties 
     */
    public DatabaseManager() {
        
        try {

            try {
                Class.forName(RadiantToolConfig.getDbDriver());
            } catch (Exception e) {
                System.out.println("ERROR: failed to load JDBC driver.");
                e.printStackTrace();
                return;
            }
            conn = DriverManager.getConnection(RadiantToolConfig.getDbUrl() + RadiantToolConfig.getDbName(), RadiantToolConfig.getDbUserId(), RadiantToolConfig.getDbPassword());

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /**
     * return connction
     * @return
     */
    public Connection getConnection(){
        return conn;
    }
    
    /**
     * initialize HSQL 
     */
    public void initRadiantHSQLDB() {
        
        try {
            
            // connect to database and save data
            conn.setAutoCommit(false);
            
            Statement stmt = conn.createStatement();
            String sql = "";
            ArrayList<String> sqls = new ArrayList<String>();
            sqls.add("DROP TABLE IF EXISTS wsdl;");
            sqls.add("DROP TABLE IF EXISTS sawsdl;");
            sqls.add("DROP TABLE IF EXISTS service;");
            sqls.add("DROP TABLE IF EXISTS user;");
            sqls.add("DROP TABLE IF EXISTS ontology;");
            
            for (String sqlStr : sqls){
                System.out.println(sqlStr);
                stmt.executeUpdate(sqlStr);
            }
            
            sql = "CREATE TABLE ontology ( " + 
                "id int GENERATED BY DEFAULT AS IDENTITY, " + 
                "name varchar(50) NOT NULL, " + 
                "iri varchar(200) NOT NULL, " +
                "PRIMARY KEY (id) " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE user ( " +
                "id int GENERATED BY DEFAULT AS IDENTITY, " + 
                "username varchar(50) NOT NULL, " + 
                "pass varchar(50) NOT NULL, " +
                "type varchar(15) NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT username_UNIQUE UNIQUE (username) " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE service ( " +
                "id int GENERATED BY DEFAULT AS IDENTITY, " +
                "name varchar(50) NOT NULL, " +
                "description varchar(3000) DEFAULT NULL, " +
                "url varchar(100) NOT NULL, " +
                "provider int NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT service_unique_name UNIQUE (name), " +
                "CONSTRAINT FK_service_provider FOREIGN KEY (provider) REFERENCES user (id) ON DELETE NO ACTION ON UPDATE NO ACTION " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE sawsdl ( " + 
                "id int GENERATED BY DEFAULT AS IDENTITY, " +
                "md5 varchar(45) NOT NULL, " +
                "xml varchar(1000000) NOT NULL, " +
                "service_id int NOT NULL, " +
                "PRIMARY KEY (id), " + 
                "CONSTRAINT FK_un_ann0_service_id FOREIGN KEY (id) REFERENCES service (id) ON DELETE NO ACTION ON UPDATE NO ACTION " + 
                ");"; 
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE wsdl ( " + 
                "id int GENERATED BY DEFAULT AS IDENTITY, " + 
                "md5 varchar(45) NOT NULL, " +
                "xml VARCHAR(1000000) NOT NULL, " +
                "service_id int NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT FK_anno_service_id FOREIGN KEY (id) REFERENCES service (id) ON DELETE NO ACTION ON UPDATE NO ACTION " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
                        
            // insert admin account and password
            DataManager.insertNewUserAccount(conn, "admin", "123456", "admin");
            
            System.out.println("init database successfully...");
            
            // commit and close
            conn.commit();
            conn.close();
        
        }catch (Exception e){
            e.printStackTrace();
        }
        
    }
    
    /**
     * initialize MySQL
     */
    public void initRadiantMySQLDB() {
        
        try {
            
            // connect to database and save data
            conn.setAutoCommit(false);
            
            Statement stmt = conn.createStatement();
            String sql = "";
            ArrayList<String> sqls = new ArrayList<String>();
            sqls.add("DROP TABLE IF EXISTS wsdl;");
            sqls.add("DROP TABLE IF EXISTS sawsdl;");
            sqls.add("DROP TABLE IF EXISTS service;");
            sqls.add("DROP TABLE IF EXISTS user;");
            sqls.add("DROP TABLE IF EXISTS ontology;");
            
            for (String sqlStr : sqls){
                System.out.println(sqlStr);
                stmt.executeUpdate(sqlStr);
            }
            
            sql = "CREATE TABLE ontology ( " + 
                "id int(11) NOT NULL AUTO_INCREMENT, " + 
                "name varchar(50) NOT NULL, " + 
                "iri varchar(200) NOT NULL, " +
                "PRIMARY KEY (id) " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE user ( " +
                "id int(11) NOT NULL AUTO_INCREMENT, " + 
                "username varchar(50) NOT NULL, " + 
                "pass varchar(50) NOT NULL, " +
                "type varchar(15) NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT username_UNIQUE UNIQUE (username) " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE service ( " +
                "id int(11) NOT NULL AUTO_INCREMENT, " +
                "name varchar(50) NOT NULL, " +
                "description varchar(3000) DEFAULT NULL, " +
                "url varchar(100) NOT NULL, " +
                "provider int NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT service_unique_name UNIQUE (name), " +
                "CONSTRAINT FK_service_provider FOREIGN KEY (provider) REFERENCES user (id) ON DELETE NO ACTION ON UPDATE NO ACTION " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE sawsdl ( " + 
                "id int(11) NOT NULL AUTO_INCREMENT, " +
                "md5 varchar(45) NOT NULL, " +
                "xml text NOT NULL, " +
                "service_id int NOT NULL, " +
                "PRIMARY KEY (id), " + 
                "CONSTRAINT FK_un_ann0_service_id FOREIGN KEY (id) REFERENCES service (id) ON DELETE NO ACTION ON UPDATE NO ACTION " + 
                ");"; 
            System.out.println(sql);
            stmt.executeUpdate(sql);
            
            sql = "CREATE TABLE wsdl ( " + 
                "id int(11) NOT NULL AUTO_INCREMENT, " + 
                "md5 varchar(45) NOT NULL, " +
                "xml text NOT NULL, " +
                "service_id int NOT NULL, " +
                "PRIMARY KEY (id), " +
                "CONSTRAINT FK_anno_service_id FOREIGN KEY (id) REFERENCES service (id) ON DELETE NO ACTION ON UPDATE NO ACTION " +
                ");";
            System.out.println(sql);
            stmt.executeUpdate(sql);
                        
            // insert admin account and password
            DataManager.insertNewUserAccount(conn, "admin", "123456", "admin");
            
            System.out.println("init database successfully...");
            
            // commit and close
            conn.commit();
            conn.close();
        
        }catch (Exception e){
            e.printStackTrace();
        }
        
    }
    
    /**
     * test method 
     * @param args
     * @throws SQLException
     */
    public static void main(String[] args) throws SQLException {
        
        DatabaseManager mgr = new DatabaseManager();
        
        if (args != null && args.length == 2){
            // do nothing
        }else if(args ==null || args.length == 0) {
            args = new String[]{"HSQL", "file:/C:/Users/ucam10a/git/bitbucket/radiantweb/WebContent/XMLBox/"};
        }else{
            System.out.println("your arguments is not correct! please check it");
            System.exit(0);
        }
        
        if (args[0].equalsIgnoreCase("HSQL")){
            // HSQL
            mgr.initRadiantHSQLDB();
        }else if (args[0].equalsIgnoreCase("MySQL")){
            // MySQL
            mgr.initRadiantMySQLDB();
        }else{
            System.out.println("The RDBMS is not available");
            System.exit(0);
        }
        
        // create new connection
        mgr = new DatabaseManager();
        
        // get admin user id
        long admin_id = QueryManager.getUserID(mgr.getConnection(), "admin");
        
        // create WSDL system
        WSDLSystem sys = new WSDLSystem(mgr.getConnection());
        
        //Please set XMLBox location first
        String XMLBoxFileURL = args[1];
        String wsdlBaseFileURL = XMLBoxFileURL + "WSDLBox/";
        String sawsdlBaseFileURL = XMLBoxFileURL + "SAWSDLBox/";
        
        FilenameFilter wsdlfilter = new FilenameFilter() {
            public boolean accept(File fileDir, String name) {
                return (name.contains(".wsdl"));
            }
        };
        FilenameFilter sawsdlfilter = new FilenameFilter() {
            public boolean accept(File fileDir, String name) {
                return (name.contains(".sawsdl"));
            }
        };
        
        // insert wsdl files in XMLBox/WSDLBox
        try{
            
            
            //Please set XMLBox location first
            File wsdlDir = new File(new URI(wsdlBaseFileURL)); 
            File[] wsdls = wsdlDir.listFiles(wsdlfilter);
            
            String[] wsfilenames = new String[wsdls.length];
            int idx = 0;
            for (File f : wsdls){
                wsfilenames[idx] = f.getName();
                idx++;
            }
            for (String wsfilename : wsfilenames){
                //System.out.println(wsfilename);
                URL wsfileURL = new URL(wsdlBaseFileURL + wsfilename);
                System.out.println(sys.saveWSDL(wsfileURL, wsfilename, admin_id));
            }
            ArrayList<String> wslist = QueryManager.getWSDLList(mgr.getConnection());
            System.out.println("wsdl size = " + wslist.size());
            for (String name : wslist){
                System.out.println(name);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
        // insert sawsdl files in XMLBox/SAWSDLBox
        try{
          
            //Please set XMLBox location first
            File sawsdlDir = new File(new URI(sawsdlBaseFileURL)); 
            File[] sawsdls = sawsdlDir.listFiles(sawsdlfilter);
            
            String[] sawsfilenames = new String[sawsdls.length];
            int idx = 0;
            for (File f : sawsdls){
                sawsfilenames[idx] = f.getName();
                idx++;
            }
            
            for (String sawsfilename : sawsfilenames){
                //System.out.println(sawsfilename);
                URL sawsfileURL = new URL(sawsdlBaseFileURL + sawsfilename);
                System.out.println(sys.saveSAWSDL(sawsfileURL, sawsfilename, admin_id));
            }
            ArrayList<String> sawslist = QueryManager.getSAWSDLList(mgr.getConnection());
            System.out.println("sawsdl size = " + sawslist.size());
            for (String name : sawslist){
                System.out.println(name);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
}
